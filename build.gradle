plugins {
    id 'com.gradle.build-scan' version '1.8'
    id 'groovy'
    id 'maven'
    id 'org.ysb33r.bintray' version '1.5'
    id 'com.gradle.plugin-publish' version '0.9.7'
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'org.asciidoctor.convert' version '1.5.3'
    id 'org.ysb33r.cloudci' version '2.2'
}

import org.asciidoctor.gradle.AsciidoctorTask

group = 'org.ysb33r.gradle'
version = '2.0-SNAPSHOT'

apply from: 'gradle/integration-tests.gradle'
apply from: 'gradle/compatibility-tests.gradle'

sourceCompatibility = 1.7
targetCompatibility = 1.7

plugins.withType(JavaPlugin) {

    project.tasks.withType(JavaCompile) { task ->
        task.sourceCompatibility = project.sourceCompatibility
        task.targetCompatibility = project.targetCompatibility
    }

    project.tasks.withType(GroovyCompile) { task ->
        task.sourceCompatibility = project.sourceCompatibility
        task.targetCompatibility = project.targetCompatibility
    }
}

ext {
    bintrayOwner = 'ysb33r'
    bintrayRepo = 'grysb33r'
    moduleName = 'gradletest-gradle-plugin'
    websitePublishFolder = "${projectDir}/website"

    notSnapshot = { !version.endsWith("SNAPSHOT") }
}

repositories {
    jcenter()

    ivy {
        name 'Downloader for Gradle distributions'
        url 'https://services.gradle.org/distributions'
        resolve.dynamicMode = false
        layout 'pattern', {
            artifact '[artifact]-[revision]-[classifier].zip'
        }
    }
}

ext {
    depCommonsIO = 'commons-io:commons-io:2.5'
    depSpock = "org.spockframework:spock-core:1.0-groovy-${GroovySystem.version.replaceAll(/\.\d+$/, '')}"
}

dependencies {
    compile gradleApi()
    compile gradleTestKit()
    compile localGroovy()
    compile depCommonsIO

    testCompile(depSpock) {
        exclude module: 'groovy-all'
    }
    integrationTestCompile gradleTestKit()
    integrationTestRepo 'commons-cli:commons-cli:1.2'
    integrationTestRepo 'org.ysb33r.gradle:doxygen:0.2'
    integrationTestRepo depCommonsIO

    // This dependency must match the one in src/main/groovy/org/ysb33r/gradle/gradletest/internal/TestSet.groovy
    integrationTestRepo(depSpock) {
        exclude module: 'groovy-all'
    }

    integrationTestDistros.each {
        add "integrationTestDistro${it.replaceAll(~/\./, '_')}", ":gradle:${it}:bin@zip"
    }

}

groovydoc {
    windowTitle 'GradleTest Plugin for Gradle'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    description "An archive of the JavaDocs for Maven Central"
    classifier "javadoc"
    from groovydoc //Javadoc
}


artifacts {
    archives sourcesJar
    archives javadocJar
}

jar {
    manifest {
        attributes 'Implementation-Title': moduleName, 'Implementation-Version': version
    }
}

test {
    systemProperties TESTROOT: "${buildDir}/tmp/testroot"
}

task integrationTestRepo(type: Copy) {

    from { configurations.integrationTestRepo.files }
    integrationTestDistros.each { distro ->
        from { configurations.getByName("integrationTestDistro${distro.replaceAll(~/\./, '_')}").files }
    }
    into "${buildDir}/integrationTest/repo"
}

task createIntegrationTestClasspathManifest {

    ext {
        outputDir = file("$buildDir/integrationTest/manifest")
    }

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("${outputDir}/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }

    dependsOn integrationTestClasses
}

test {
    dependsOn integrationTestRepo
    systemProperties GRADLETESTREPO: file("${buildDir}/integrationTest/repo")
}

integrationTest {

    dependsOn integrationTestRepo, createIntegrationTestClasspathManifest

    systemProperties TESTPROJECTSRCDIR: "${buildDir}/resources/integrationTest/gradleTest"
    systemProperties GRADLETESTDIST: configurations.integrationTestDistro3_0.files[0]
    systemProperties GRADLETESTREPO: file("${buildDir}/integrationTest/repo")
    systemProperties PLUGIN_METADATA_FILE: file("${createIntegrationTestClasspathManifest.outputDir}/plugin-classpath.txt")
    systemProperties PROJECTROOT: projectDir

    if (gradle.startParameter.offline) {
        systemProperties OFFLINE: '1'
    }

    reports.html.destination = file("${reporting.baseDir}/integrationTests")
}

task combinedTestReport(type: TestReport) {
    group 'Validation'
    description 'Produces combined testing report'
    destinationDir file("${reporting.baseDir}/combined")
    reportOn test, integrationTest, file("${buildDir}/compatibilityTest/test-results/binary/gradleTest")
    dependsOn test, integrationTest, compatibilityTest
}

uploadArchives {
    repositories {
        bintrayMavenDeployer {
            username project.properties.bintrayUserName
            apiKey project.properties.bintrayApiKey
            repoOwner bintrayOwner
            repoName bintrayRepo
            packageName moduleName
            description 'A plugin that helps you test your plugin against a variety of Gradle versions'
            tags 'testing', 'integrationTesting', 'compatibilityTesting', 'gradle'
            licenses 'Apache-2.0'
            vcsUrl 'https://github.com/ysb33r/gradleTest.git'
            autoCreatePackage true
            updatePackage true
            versionAttributes 'gradle-plugin': "org.ysb33r.gradletest:${group}:${archivesBaseName}"
        }
    }

    onlyIf { !version.endsWith("-SNAPSHOT") }
    mustRunAfter compatibilityTest
}

pluginBundle {
    description = 'A plugin that helps you test your plugin against a variety of Gradle versions'
    website = 'https://github.com/ysb33r/gradleTest'
    vcsUrl = 'https://github.com/ysb33r/gradleTest.git'

    tags = ['testing', 'integrationTesting', 'compatibility']

    plugins {
        gradletestPlugin {
            id = 'org.ysb33r.gradletest'
            displayName = 'Plugin for compatibility testing of Gradle plugins'
        }
        gradletestBasePlugin {
            id = 'org.ysb33r.gradletest.base'
            displayName = 'Base plugin for compatibility testing of Gradle plugins providing only functionality, but not default testsets.'
        }
    }
}

publishPlugins {
    onlyIf notSnapshot
    mustRunAfter compatibilityTest
}

license {
    header = rootProject.file('config/HEADER')
    strictCheck = true
    ignoreFailures = false
    ext.year = '2015 - 2017'
    excludes(['**/*.ad', '**/*.asciidoc', '**/*.adoc', '**/*.md', '**/*.properties', '**/*.groovy.template'])
    mapping 'gradle', 'SLASHSTAR_STYLE'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}


if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task validateDocVersions {
    group 'Documentation'
    description 'Validates if current version is listed in (not SNAPSHOTS)'
    onlyIf { !version.endsWith('-SNAPSHOT') }

    ext {
        versionsFile = file('src/docs/landingPage/display-versions.txt')
    }

    doLast {
        if (null == versionsFile.readLines().find { it == version }) {
            throw new GradleException("Current version ${version} is not listed. " +
                "Please correct ${versionsFile} before installing.")
        }
    }
}

task generateDocVersionsTable(type: Copy) {

    ext {
        targetDir = file("${buildDir}/generated-docs")
    }

    group "Documentation"
    description 'Generates Asciidoc content for landing page'
    mustRunAfter validateDocVersions

    from 'src/docs/landingPage', {
        include 'display-versions.txt'
        rename ~/(.+)\.txt/, '$1.adoc'
        filter { String line ->
            if (line.startsWith('//') || line.startsWith('#')) {
                return null
            }
            final String docsLink = "link:${line}/docs/product-documentation.html[Docs]"
            final String apiLink = line == '0.5.5' ? '' : "link:${line}/api/index.html[Groovydoc]"
            final String clogLink = "link:${line}/docs/changelog.html[Changelog]"
            return "a|*${line}*|${docsLink}|${apiLink}|${clogLink}"
        }
    }

    into targetDir
}

task landingPage(type: AsciidoctorTask) {

    dependsOn generateDocVersionsTable
    mustRunAfter validateDocVersions

    inputs.dir generateDocVersionsTable.targetDir
    sourceDir 'src/docs/landingPage'
    outputDir "${buildDir}/docs/landingPage"
    separateOutputDirs = false

    sources {
        include 'index.adoc'
    }

    resources {
        from 'stylesheets'
        from 'images'
    }

    attributes gendocdir: file("${generateDocVersionsTable.targetDir}").absolutePath,
        compatdir: file('compatibility').absolutePath,
        revnumber: "${version}"
}

asciidoctor {
    group "Documentation"
    description 'Generates the main product documentation & changelog'
    mustRunAfter validateDocVersions
    outputDir "${buildDir}/docs/plugin"
    separateOutputDirs = false

    sources {
        include 'product-documentation.adoc'
        include 'changelog.adoc'
    }

    attributes revnumber: "${version}",
        topdir: projectDir.absolutePath,
        compatdir: file('compatibility').absolutePath
}


task installDocs(type: Copy) {

    dependsOn validateDocVersions, asciidoctor, landingPage, groovydoc

    from landingPage.outputDir
    into websitePublishFolder

    with copySpec {
        from asciidoctor.outputDir
        into "${version}/docs"
    }

    with copySpec {
        from groovydoc
        into "${version}/api"
    }

    doLast {
        logger.lifecycle "Files copied to website repo. To publish, change to ${websitePublishFolder} and commit and push from there."
    }

    onlyIf notSnapshot
}

check {
    dependsOn validateDocVersions
    dependsOn combinedTestReport
}

publishPlugins {
    onlyIf notSnapshot
}

task release {
    group "Release"
    description "Lifecycle task for release a new version"
    onlyIf notSnapshot
    dependsOn build, compatibilityTest, publishPlugins, uploadArchives, installDocs
}

cloudci {
    appveyor {
        integrationTest {
            jvmArgs '-XX:MaxPermSize=512m'
        }
    }
}